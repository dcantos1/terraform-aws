# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "develop" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: 
    - develop
    - testing
    - master


jobs:

  init-zip:
    name: 'ðŸ“ŒZip Aplicacion'
    runs-on: ubuntu-latest
    environment: develop
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '14'
    - run: cd 
    - run: npm install
    - run: npm run pack
    - uses: actions/upload-artifact@v3
      with:
        name: zip
        path: function.zip
    
 
  deploy-dev:
    name: 'ðŸš€Deploy Terraform to Develop'
    if: ${{ github.ref == 'refs/heads/develop' }}
    needs: init-zip
    runs-on: ubuntu-latest
    environment: develop
    defaults: 
      run: 
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with: 
        name: zip

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with: 
        terraform_version: 1.2.9

    - name: Terraform
      run: |
        rm -rf .terraform
        terraform init
        terraform validate
        terraform workspace new dev
        terraform workspace select dev
        terraform plan -var-file tfvars/$ENV.tfvars -out plan.out
        terraform apply "plan.out"
      env:
        ENV: dev
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: "us-east-1"
        GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
      
  deploy-testing:
    name: 'ðŸš€Deploy Terraform to testing'
    if: ${{ github.ref == 'refs/heads/testing' }}
    needs: init-zip
    runs-on: ubuntu-latest
    environment: testing
    defaults: 
      run: 
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with: 
        name: zip

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with: 
        terraform_version: 1.2.9

    - name: Terraform
      run: |
        rm -rf .terraform
        terraform init
        terraform validate
        terraform workspace new testing
        terraform workspace select testing
        terraform plan -var-file tfvars/$ENV.tfvars -out plan.out
        terraform apply "plan.out"
      env:
        ENV: tst
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: "us-east-1"
        GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
 
  deploy-prod:
    name: 'ðŸš€Deploy Terraform to prod'
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: init-zip
    runs-on: ubuntu-latest
    environment: develop
    defaults: 
      run: 
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with: 
        name: zip

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with: 
        terraform_version: 1.2.9

    - name: Terraform
      run: |
        rm -rf .terraform
        terraform init
        terraform validate
        terraform workspace new prod
        terraform workspace select prod
        terraform plan -var-file tfvars/$ENV.tfvars -out plan.out
        terraform apply "plan.out"
      env:
        ENV: prod
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: "us-east-1"
        GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}   
       
